#!/usr/bin/gjs

const GnomeDesktop = imports.gi.GnomeDesktop;
const Gdk = imports.gi.Gdk;
const GLib = imports.gi.GLib;
const Gtk = imports.gi.Gtk;

const System = imports.system;

Gtk.init(null, null);
let screen = Gdk.Screen.get_default();
let rrScreen = null;

try {
    rrScreen = GnomeDesktop.RRScreen.new(screen);
} catch(e) {
    logError(e, 'Can\'t create RRScreen for default GdkScreen');
    System.exit(-1);
}

let config = null;

try {
    config = GnomeDesktop.RRConfig.new_current(rrScreen);
} catch(e) {
    logError(e, 'Can\'t create RRConfig for current configuration');
    System.exit(-1);
}

let cmdline = ARGV.join(' ');
let status = 0;
let stdOut = null;
let stdErr = null;

try {
    [, stdOut, stdErr, status] = GLib.spawn_command_line_sync(cmdline);
} catch(e) {
    logError(e, 'Can\'t spawn command line');
    System.exit(-1);
}

if (status == 0) {
    log('\nProcess exited cleanly\nstdout:\n' + stdOut + 'stderr:\n' + stdErr);
} else {
    log('\nProcess exited with error\nstdout:\n' + stdOut + 'stderr:\n' + stdErr);
}

try {
    config.apply_with_time(rrScreen, 0);
} catch(e) {
    logError(e, 'Failed to apply the last configuration');
    System.exit(-1);
}

System.exit(status);
