#!/usr/bin/gjs

imports.searchPath.unshift('.');
let GLib = imports.gi.GLib;

if (!('assertEquals' in this)) { /* allow running this test standalone */
    imports.lang.copyPublicProperties(imports.jsUnit, this);
}

if (!('outputJenkinsResults' in this)) {
    imports.lang.copyPublicProperties(imports.jenkinsTestPlugin, this);
}

ANSI_ESC = String.fromCharCode(0x1B);
ANSI_CSI = ANSI_ESC + '[';
ANSI_CLOSE = ANSI_CSI + "0m";
ANSI_BOLD_RED = ANSI_CSI + "1;31m";
ANSI_RED = ANSI_CSI + "31m";
ANSI_GREEN = ANSI_CSI + "32m";
ANSI_BOLD_BLUE = ANSI_CSI + "1;34m";
TIME_RESOLUTION = 4;
DEFAULT_TIME_RESOLUTION = 6;

var testsRunCount = 0;
var testsFailedCount = 0;

printColorized = function(color, text){
    print(color + text + ANSI_CLOSE);
}

printError = function(error){
    const SYNTAX_ERROR = '[object Error]';
    printColorized(ANSI_RED, " " + error.message);


    if(error.stackTrace){
        let stackTrace = error.stackTrace.split('\n');
        stackTrace.forEach(function(line) {
            if(line.length > 0){
                let prefix = ' --';
                if (error.type == SYNTAX_ERROR)
                    prefix += '> ';

                printColorized(ANSI_RED, prefix + line);
            }
        });
    }
}

_getTime = function(){
    var time = new GLib.TimeVal();
    GLib.get_current_time(time);
    
    return time.tv_sec + time.tv_usec / Math.pow(10, DEFAULT_TIME_RESOLUTION);
}

//File to be tested
var testFile = imports.testfoo;
this.setjsUnitTracer(true);

var results = new Array();

Object.keys(testFile).forEach(function(key){
    if(key.indexOf('test') == 0) {
        var result = { "name": key };
        printColorized(ANSI_BOLD_BLUE, "Running: " + key);

        testFile.setUp();
        startTime = _getTime();
        try {
             testFile[key]();
        } catch(e) {
             printColorized(ANSI_BOLD_RED, " ERROR! >>>>> " + key + " <<<<<");


             testsFailedCount++;
             result.error = { 'type': Object.prototype.toString.apply(e), 
                              'message': e.message || e.jsUnitMessage,
                              'stackTrace':  e.stack || e.stackTrace };
             printError(result.error);

             print();
        } finally {
             testFile.tearDown();
        }

        result.time = _getTime() - startTime;
        results.push(result);
        testsRunCount++;
    }
});

testPassedCount = testsRunCount - testsFailedCount;

printColorized(ANSI_BOLD_BLUE, "\nExporting Jenkins results");
aggregateResults = { 'results': results,
                     'name': 'eos-testrunner',
                     'tests': testsRunCount, 
                     'errors': testsFailedCount, 
                     'failures': 0, 
                     'skip': 0 };

outputJenkinsResults('jenkins.xml', aggregateResults);

printColorized(ANSI_BOLD_BLUE, Array(50).join("-"));
totalsString = "Ran " + testsRunCount + " tests (" + testPassedCount + " Passed, " + testsFailedCount + " Failed)";
printColorized(ANSI_BOLD_BLUE, totalsString);

if (testsFailedCount > 0){
    throw ANSI_BOLD_RED + "Test did not complete successfully" + ANSI_CLOSE;
}

