#!/usr/bin/gjs

imports.searchPath.unshift('.');

if (!('assertEquals' in this)) { /* allow running this test standalone */
    imports.lang.copyPublicProperties(imports.jsUnit, this);
}

if (!('outputJenkinsResults' in this)) {
    imports.lang.copyPublicProperties(imports.jenkinsTestPlugin, this);
}

ANSI_ESC = String.fromCharCode(0x1B);
ANSI_CSI = ANSI_ESC + '[';
ANSI_CLOSE = ANSI_CSI + "0m";
ANSI_BOLD_RED = ANSI_CSI + "1;31m";
ANSI_RED = ANSI_CSI + "31m";
ANSI_GREEN = ANSI_CSI + "32m";
ANSI_BOLD_BLUE = ANSI_CSI + "1;34m";

var testsRunCount = 0;
var testsFailedCount = 0;

function printType(obj){
     print(Object.prototype.toString.apply(obj));
}

printColorized = function(color, text){
    print(color + text + ANSI_CLOSE);
}

printError = function(error){
    printColorized(ANSI_RED, " " + error.message);

    if(error.stack){
        stackTrace = error.stack.split('\n');
        stackTrace.forEach(function(line) {
            if(line.length > 0){
                printColorized(ANSI_RED, " --> " + line);
            }
        });
    }
}

printJsUnitError = function(error){
    printColorized(ANSI_RED, " " + error.jsUnitMessage);
    if (error.comment){
        printColorized(ANSI_RED, " " + error.comment);
    }

    if(error.stackTrace){
        stackTrace = error.stackTrace.split('\n');
        stackTrace.forEach(function(line) {
            if(line.length > 0){
                printColorized(ANSI_RED, " --" + line);
            }
        });
    }
}

var testFile = imports.testfoo;
this.setjsUnitTracer(true);

var results = new Array();
Object.keys(testFile).forEach(function(key){
    if(key.indexOf('test') == 0) {
        var result = { "name": key };
        printColorized(ANSI_BOLD_BLUE, "Running: " + key);

        testFile.setUp();
        try {
             testFile[key]();
        } catch(e) {
             printColorized(ANSI_BOLD_RED, " ERROR! >>>>> " + key + " <<<<<");
             if(e instanceof Error){
               printError(e);
             }else{
               printJsUnitError(e);
             }
             testsFailedCount++;
             print();
        } finally {
             testFile.tearDown();
        }
        results.push(result);
        testsRunCount++;
    }
});


testPassedCount = testsRunCount - testsFailedCount;

printColorized(ANSI_BOLD_BLUE, "\nExporting Jenkins results");
outputJenkinsResults("jenkins.xml", "eos-testrunner", results);

printColorized(ANSI_BOLD_BLUE, "---------------------------------------------");
printColorized(ANSI_BOLD_BLUE, "DONE! Ran " + testsRunCount + " tests (" + testPassedCount + " Passed, " + testsFailedCount + " Failed).");
if (testsFailedCount > 0){
    throw ANSI_BOLD_RED + "Test did not complete successfully" + ANSI_CLOSE;
}

